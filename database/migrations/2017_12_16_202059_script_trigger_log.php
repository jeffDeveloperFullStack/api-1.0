<?php

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class ScriptTriggerLog extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        DB::unprepared('
        CREATE OR REPLACE FUNCTION FUNCTION_LOG_FUNC() RETURNS TRIGGER AS $$
            BEGIN
                IF (TG_OP = \'DELETE\') THEN
                    INSERT INTO LOG (LOG_DATA, LOG_OPERACAO, LOG_TABELA, LOG_OLD, LOG_NEW) VALUES (CURRENT_TIMESTAMP, TG_OP, TG_TABLE_NAME , row_to_json(OLD.*), NULL);
                    RETURN OLD;
                ELSIF (TG_OP = \'UPDATE\') THEN
                    INSERT INTO LOG (LOG_DATA, LOG_OPERACAO, LOG_TABELA, LOG_OLD, LOG_NEW) VALUES(CURRENT_TIMESTAMP, TG_OP, TG_TABLE_NAME , row_to_json(OLD.*), row_to_json(NEW.*));
                    RETURN NEW;
                ELSIF (TG_OP = \'INSERT\') THEN
                    INSERT INTO LOG (LOG_DATA, LOG_OPERACAO, LOG_TABELA, LOG_OLD, LOG_NEW) VALUES(CURRENT_TIMESTAMP, TG_OP, TG_TABLE_NAME , row_to_json(NEW.*), NULL);
                RETURN NEW;
                END IF;
            END;
        $$ LANGUAGE plpgsql;

        CREATE TRIGGER CLIENTE_TRIGGER_LOG BEFORE INSERT OR UPDATE OR DELETE ON CLIENTE 
        FOR EACH ROW EXECUTE PROCEDURE FUNCTION_LOG_FUNC();

        CREATE TRIGGER COMPRA_TRIGGER_LOG BEFORE INSERT OR UPDATE OR DELETE ON COMPRA 
        FOR EACH ROW EXECUTE PROCEDURE FUNCTION_LOG_FUNC();

        CREATE TRIGGER COMPRA_PRODUTO_TRIGGER_LOG BEFORE INSERT OR UPDATE OR DELETE ON COMPRA_PRODUTO
        FOR EACH ROW EXECUTE PROCEDURE FUNCTION_LOG_FUNC();

        CREATE TRIGGER FORMAPAGTO_TRIGGER_LOG BEFORE INSERT OR UPDATE OR DELETE ON FORMAPAGTO 
        FOR EACH ROW EXECUTE PROCEDURE FUNCTION_LOG_FUNC();

        CREATE TRIGGER FORNECEDOR_TRIGGER_LOG BEFORE INSERT OR UPDATE OR DELETE ON FORNECEDOR 
        FOR EACH ROW EXECUTE PROCEDURE FUNCTION_LOG_FUNC();

        CREATE TRIGGER PESSOA_TRIGGER_LOG BEFORE INSERT OR UPDATE OR DELETE ON PESSOA 
        FOR EACH ROW EXECUTE PROCEDURE FUNCTION_LOG_FUNC();

        CREATE TRIGGER PRODUTO_TRIGGER_LOG BEFORE INSERT OR UPDATE OR DELETE ON PRODUTO 
        FOR EACH ROW EXECUTE PROCEDURE FUNCTION_LOG_FUNC();

        CREATE TRIGGER USUARIO_TRIGGER_LOG BEFORE INSERT OR UPDATE OR DELETE ON USUARIO 
        FOR EACH ROW EXECUTE PROCEDURE FUNCTION_LOG_FUNC();

        CREATE TRIGGER VENDA_TRIGGER_LOG BEFORE INSERT OR UPDATE OR DELETE ON VENDA 
        FOR EACH ROW EXECUTE PROCEDURE FUNCTION_LOG_FUNC();

        CREATE TRIGGER VENDA_PAGTO_TRIGGER_LOG BEFORE INSERT OR UPDATE OR DELETE ON VENDA_PAGTO
        FOR EACH ROW EXECUTE PROCEDURE FUNCTION_LOG_FUNC();

        CREATE TRIGGER VENDA_PRODUTO_TRIGGER_LOG BEFORE INSERT OR UPDATE OR DELETE ON VENDA_PRODUTO 
        FOR EACH ROW EXECUTE PROCEDURE FUNCTION_LOG_FUNC();
        ');
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        //
    }
}
